
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:

–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å API)
SMS-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —Ä–∞–π–æ–Ω–∞–º
–†–µ–π—Ç–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
–ö–∞–∫—É—é –∏–∑ —ç—Ç–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π —Ö–æ—Ç–µ–ª–∏ –±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ?


Scroll to latest
Assistant mode

advanced
Claude 4.0 Sonnet
–ß—Ç–æ —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç, –µ—Å–ª–∏ 
        url="https://t.me/DilovarAkhi" # Make sure this is the correct contact
            print(f"Failed to send promo to {user_id}: {e}")
            failed_count += 1

        await asyncio.sleep(0.1) # Small delay to avoid hitting Telegram limits too hard

    await message.answer(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}")

# --- Bot Startup ---
@dp.callback_query(lambda c: c.data.startswith("status_"))
async def handle_status_update(callback: types.CallbackQuery):
    try:
        parts = callback.data.split("_", 2)  # Split only on first 2 underscores
        if len(parts) < 3:
            raise ValueError("Invalid callback data format")
        
        _, order_number, new_status = parts
        
        # Convert callback data status to enum name
        status_mapping = {
            "preparing": "PREPARING",
            "on_the_way": "ON_THE_WAY", 
            "delivered": "DELIVERED"
        }
        
        if new_status not in status_mapping:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", show_alert=True)
            return
            
        new_status = status_mapping[new_status]

        if new_status not in [status.name for status in OrderStatus]:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", show_alert=True)
            return

        # Find the order and update its status
        found = False
        for user_id, orders_list in user_orders.items():
            for order in orders_list:
                if order["order_number"] == order_number:
                    old_status = order["status"]
                    order["status"] = OrderStatus[new_status]
                    found = True

                    # Notify the customer
                    notification = f"üîî <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_number}</b>\n{OrderStatus[new_status].value}"
                    await bot.send_message(user_id, notification)

                    # Update buttons in admin/courier messages
                    status_kb = InlineKeyboardBuilder()
                    remaining_statuses = []
                    if new_status == "PREPARING":
                        remaining_statuses = ["on_the_way", "delivered"]
                    elif new_status == "ON_THE_WAY":
                        remaining_statuses = ["delivered"]

                    for status in remaining_statuses:
                        button_text = "üöó –û—Ç–¥–∞—Ç—å –∫—É—Ä—å–µ—Ä—É" if status == "on_the_way" else "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω"
                        status_kb.button(text=button_text, callback_data=f"status_{order_number}_{status}")

                    new_message_text = callback.message.text + f"\n\n<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {OrderStatus[new_status].value}"

                    if remaining_statuses:
                        await callback.message.edit_text(new_message_text, reply_markup=status_kb.adjust(1).as_markup())
                    else:
                        await callback.message.edit_text(new_message_text)

                    break
            if found:
                break

        if not found:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        await callback.answer("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω")

    except Exception as e:
        print(f"Error updating order status: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)

async def main():
    print("Bot is starting...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    keep_alive() # If you are using a service like Replit to keep the bot alive
    asyncio.run(main())

10m
 ‚Ä¢ 
13 minutes ago
Preview your app here
The app is currently not running.

Run
to see the results of your app.
