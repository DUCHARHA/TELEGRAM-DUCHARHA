from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import asyncio
from keep_alive import keep_alive
from enum import Enum
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime  # –£–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å ‚Äî –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ

# –°—á—ë—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
daily_order_counter = {}

# –°–≤—è–∑—å –º–µ–∂–¥—É –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞ –∏ user_id
order_number_to_user = {}

API_TOKEN = "7582557120:AAHsoe7RYRjCbPV9EwNh5Ak6C9HmTZGRbRs"
ADMIN_ID = 1648127193
COURIERS_CHAT_ID = -1002297990202
last_help_message_id = None  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –≤ –Ω–∞—á–∞–ª–æ —Å –¥—Ä—É–≥–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÇ –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="üõç –ö–æ—Ä–∑–∏–Ω–∞")],
        [KeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="üì¢ –ù–æ–≤–æ—Å—Ç–∏")],
        [KeyboardButton(text="‚≠êÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

class OrderForm(StatesGroup):
    waiting_for_location = State()
    confirm_address = State()
    waiting_for_phone = State()

class OrderStatus(Enum):
    ACCEPTED = "–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç"
    PREPARING = "–í–∞—à –∑–∞–∫–∞–∑ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è"
    ON_THE_WAY = "–í–∞—à –∑–∞–∫–∞–∑ –µ–¥–µ—Ç –∫ –≤–∞–º"
    DELIVERED = "–í–∞—à –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω"

user_carts = {}
user_orders = {}

products = {
    "category_fruits": {"–Ø–±–ª–æ–∫–æ": 3, "–ë–∞–Ω–∞–Ω": 4, "–ê–ø–µ–ª—å—Å–∏–Ω": 5},
    "category_vegetables": {"–ö–∞—Ä—Ç–æ—à–∫–∞": 2, "–ú–æ—Ä–∫–æ–≤—å": 1, "–û–≥—É—Ä–µ—Ü": 3},
    "category_drinks": {"–ö–æ–ª–∞": 6, "–°–æ–∫": 5, "–í–æ–¥–∞": 2},
    "category_snacks": {"–ß–∏–ø—Å—ã": 4, "–®–æ–∫–æ–ª–∞–¥": 5, "–û—Ä–µ—Ö–∏": 6},
    "category_milks": {"–ú–æ–ª–æ–∫–æ": 18, "–°–º–µ—Ç–∞–Ω–∞": 14, "–ö–µ—Ñ–∏—Ä": 12}
}

@dp.message(CommandStart())
async def send_welcome(message: Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="–§—Ä—É–∫—Ç—ã", callback_data="category_fruits")
    kb.button(text="–û–≤–æ—â–∏", callback_data="category_vegetables")
    kb.button(text="–ù–∞–ø–∏—Ç–∫–∏", callback_data="category_drinks")
    kb.button(text="–°–Ω–µ–∫–∏", callback_data="category_snacks")
    kb.button(text="–ú–æ–ª–æ—á–∫–∞", callback_data="category_milks")

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!                                                               –ñ–¥—ë–º –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ üíú", reply_markup=main_menu)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ (—Ç–æ—Ç, —á—Ç–æ —Ç—ã –ø—Ä–∏—Å–ª–∞–ª)
    await bot.send_sticker(message.chat.id, "CAACAgQAAxkBAAIJT2gmdq7qFlY80egtqdn3Q0QPoA5iAAISDQAC1MiAUAXbnVAhxur0NgQ")

    # –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup())


@dp.message(Command("status"))
async def change_order_status(message: Message):
    if message.from_user.id != ADMIN_ID:
        return

    try:
        parts = message.text.split()
        if len(parts) != 3:
            raise ValueError("–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /status <–Ω–æ–º–µ—Ä_–∑–∞–∫–∞–∑–∞> <—Å—Ç–∞—Ç—É—Å>")

        _, order_number_str, status_str = parts
        order_number = int(order_number_str)
        status = OrderStatus[status_str.upper()]

        user_id = None
        order_to_update = None

        for uid, orders in user_orders.items():
            for order in orders:
                if order["order_number"] == order_number:
                    user_id = uid
                    order_to_update = order
                    break
            if user_id:
                break

        if user_id and order_to_update:
            order_to_update["status"] = status
            await bot.send_message(user_id, f"<b>{status.value}</b>")
            await message.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order_number} –æ–±–Ω–æ–≤–ª—ë–Ω: {status.value}")
        else:
            await message.answer("–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except Exception:
        await message.answer(
            "–û—à–∏–±–∫–∞. –ü—Ä–∏–º–µ—Ä: /status 2 preparing\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: accepted, preparing, on_the_way, delivered"
)

@dp.message(F.sticker)
async def get_sticker_id(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer(f"file_id —Å—Ç–∏–∫–µ—Ä–∞:\n<code>{message.sticker.file_id}</code>")

@dp.callback_query(lambda c: c.data.startswith("category_"))
async def show_category(callback: types.CallbackQuery):
    category = callback.data
    items = products.get(category, {})
    kb = InlineKeyboardBuilder()
    for item, price in items.items():
        kb.button(text=f"{item} - {price} —Å–æ–º", callback_data=f"add_{item}")
    kb.button(text="–ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="back")
    await callback.message.edit_text(f"<b>{category.split('_')[1].capitalize()}</b>:", reply_markup=kb.as_markup())
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery):
    item = callback.data.replace("add_", "")
    user_id = callback.from_user.id
    for category in products.values():
        if item in category:
            price = category[item]
            cart = user_carts.setdefault(user_id, {})
            if item in cart:
                cart[item]["quantity"] += 1
            else:
                cart[item] = {"price": price, "quantity": 1}
            await callback.answer(f"{item} –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
            return

@dp.callback_query(lambda c: c.data.startswith("increase_"))
async def increase_quantity(callback: types.CallbackQuery):
    item = callback.data.replace("increase_", "")
    user_id = callback.from_user.id
    cart = user_carts.get(user_id, {})
    if item in cart:
        cart[item]["quantity"] += 1
    await show_cart(callback)
    await callback.answer(f"–î–æ–±–∞–≤–ª–µ–Ω –µ—â—ë –æ–¥–∏–Ω {item}")

@dp.callback_query(lambda c: c.data.startswith("decrease_"))
async def decrease_quantity(callback: types.CallbackQuery):
    item = callback.data.replace("decrease_", "")
    user_id = callback.from_user.id
    cart = user_carts.get(user_id, {})
    if item in cart:
        if cart[item]["quantity"] > 1:
            cart[item]["quantity"] -= 1
        else:
            del cart[item]
    await show_cart(callback)
    await callback.answer(f"{item} –æ–±–Ω–æ–≤–ª—ë–Ω")

@dp.callback_query(lambda c: c.data.startswith("remove_"))
async def remove_from_cart(callback: types.CallbackQuery):
    item_to_remove = callback.data.replace("remove_", "")
    user_id = callback.from_user.id
    cart = user_carts.get(user_id, {})

    if item_to_remove in cart:
        del cart[item_to_remove]
        await show_cart(callback)
        await callback.answer(f"{item_to_remove} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")

@dp.callback_query(lambda c: c.data == "cart")
async def show_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cart = user_carts.get(user_id, {})

    if not cart:
        await callback.message.edit_text("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu)
        return

    text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    total = 0
    kb = InlineKeyboardBuilder()

    for item, data in cart.items():
        price = data["price"]
        qty = data["quantity"]
        text += f"‚ñ™Ô∏è {item} ‚Äî {qty} x {price} = {qty * price} —Å–æ–º\n"
        total += qty * price

        kb.row(
            types.InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease_{item}"),
            types.InlineKeyboardButton(text=f"{qty}", callback_data="noop"),
            types.InlineKeyboardButton(text="‚ûï", callback_data=f"increase_{item}"),
            types.InlineKeyboardButton(text="‚ùå", callback_data=f"remove_{item}")
        )

    text += f"\n<b>–ò—Ç–æ–≥–æ: {total} —Å–æ–º</b>"

    kb.row(
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back"),
        types.InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data="checkout")
    )

    await callback.message.edit_text(text, reply_markup=kb.as_markup())
    await callback.answer()

@dp.callback_query(lambda c: c.data == "checkout")
async def ask_location(callback: types.CallbackQuery, state: FSMContext):
    kb = InlineKeyboardBuilder()
    kb.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data="send_location")
    kb.button(text="–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é", callback_data="write_address")
    await callback.message.answer("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å?", reply_markup=kb.as_markup())
    await callback.answer()

@dp.callback_query(lambda c: c.data == "send_location")
async def ask_geo(callback: types.CallbackQuery, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=kb)
    await state.set_state(OrderForm.waiting_for_location)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "write_address")
async def ask_manual_address(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é (—É–ª–∏—Ü–∞, –¥–æ–º, —ç—Ç–∞–∂, –∫–≤–∞—Ä—Ç–∏—Ä–∞, –º–æ–∂–Ω–æ –∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä):")
    await state.set_state(OrderForm.confirm_address)
    await callback.answer()

@router.message(OrderForm.waiting_for_location)
async def confirm_location(message: Message, state: FSMContext):
    if message.location:
        latitude = message.location.latitude
        longitude = message.location.longitude
        address = f"https://yandex.ru/maps/?ll={longitude}%2C{latitude}&z=18&l=map&pt={longitude},{latitude},pm2rdl"
        await state.update_data(address=address)
        kb = InlineKeyboardBuilder()
        kb.button(text="–î–∞", callback_data="confirm_address_yes")
        kb.button(text="–ù–µ—Ç", callback_data="confirm_address_no")
        await message.answer(f"–≠—Ç–æ –≤–∞—à –∞–¥—Ä–µ—Å?\n{address}", reply_markup=kb.as_markup())
        await state.set_state(OrderForm.confirm_address)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'.")

@router.message(OrderForm.confirm_address)
async def handle_address(message: Message, state: FSMContext):
    if message.location:
        latitude = message.location.latitude
        longitude = message.location.longitude
        address = f"https://yandex.ru/maps/?ll={longitude}%2C{latitude}&z=18&l=map&pt={longitude},{latitude},pm2rdl"
    else:
        address = message.text
    await state.update_data(address=address)
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–∞", callback_data="confirm_address_yes")
    kb.button(text="–ù–µ—Ç", callback_data="confirm_address_no")
    await message.answer(f"–≠—Ç–æ –≤–∞—à –∞–¥—Ä–µ—Å?\n{address}", reply_markup=kb.as_markup())

@dp.callback_query(lambda c: c.data == "confirm_address_yes")
async def ask_phone(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(OrderForm.waiting_for_phone)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "confirm_address_no")
async def retry_location(callback: types.CallbackQuery, state: FSMContext):
    kb = InlineKeyboardBuilder()
    kb.button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data="send_location")
    kb.button(text="–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é", callback_data="write_address")
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –µ—â—ë —Ä–∞–∑:", reply_markup=kb.as_markup())
    await callback.answer()

@router.message(OrderForm.waiting_for_phone)
async def get_phone(message: Message, state: FSMContext):
    data = await state.get_data()
    address = data["address"]
    phone = message.text
    user_id = message.from_user.id

    today = datetime.now().strftime("%Y-%m-%d")
    if today not in daily_order_counter:
        daily_order_counter[today] = 0
    daily_order_counter[today] += 1
    order_number = daily_order_counter[today]

    order_number_to_user[message.from_user.id] = order_number
    
    cart = user_carts.get(user_id, {})
    order_text = "\n".join(
        f"- {item} x {data['quantity']} = {data['price'] * data['quantity']} —Å–æ–º"
        for item, data in cart.items()
    )
    total = sum(data['price'] * data['quantity'] for data in cart.values()) 
    text = (
        f"<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order_number}</b>\n\n"
        f"{order_text}\n\n"
        f"<b>–ò—Ç–æ–≥–æ: {total} —Å–æ–º</b>\n"
        f"<b>–ê–¥—Ä–µ—Å:</b> {address}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! üíú "
    )

    user_carts[user_id] = []
    await message.answer(text, reply_markup=main_menu)

    user_name = f"@{message.from_user.username}" if message.from_user.username else f"ID {user_id}"
    notify_text = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç {user_name}:\n{text}"
    await bot.send_message(ADMIN_ID, notify_text)
    await bot.send_message(COURIERS_CHAT_ID, notify_text)

    user_orders.setdefault(user_id, []).append({
        "status": OrderStatus.ACCEPTED,
        "text": text,
        "order_number": order_number
    })

    await state.clear()

@dp.message(Command("active_orders"))
async def cmd_active_orders(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    if not user_orders:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", reply_markup=main_menu)
        return

    response = "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
    found = False

    for user_id, orders in user_orders.items():
        for order in orders:
            if order["status"] in [OrderStatus.ACCEPTED, OrderStatus.PREPARING, OrderStatus.ON_THE_WAY]:
                found = True
                chat = await bot.get_chat(user_id)
                user_name = f"@{chat.username}" if chat.username else f"ID {user_id}"
                response += (
                    f"‚Ññ{order['order_number']} ‚Äî {user_name} ‚Äî <b>{order['status'].value}</b>\n\n"
                    f"{order['text']}\n\n---\n\n"
    )

    await message.answer(response, reply_markup=main_menu) 

@dp.callback_query(lambda c: c.data == "back")
async def go_back(callback: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="–§—Ä—É–∫—Ç—ã", callback_data="category_fruits")
    kb.button(text="–û–≤–æ—â–∏", callback_data="category_vegetables")
    kb.button(text="–ù–∞–ø–∏—Ç–∫–∏", callback_data="category_drinks")
    kb.button(text="–°–Ω–µ–∫–∏", callback_data="category_snacks")
    kb.button(text="–ú–æ–ª–æ—á–∫–∞", callback_data="category_milks")

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup())
    await callback.answer()

@dp.message(Command("cart"))
async def cmd_cart(message: Message):
    user_id = message.from_user.id
    cart = user_carts.get(user_id, {})
    
    if not cart:
        await message.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", reply_markup=main_menu)
        return

    text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    total = 0
    kb = InlineKeyboardBuilder()
    
    for item, data in cart.items():
        price = data["price"]
        qty = data["quantity"]
        subtotal = price * qty
        text += f"‚ñ™Ô∏è {item} ‚Äî {qty} x {price} = {subtotal} —Å–æ–º\n"
        total += subtotal

        kb.row(
            types.InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease_{item}"),
            types.InlineKeyboardButton(text=f"{qty}", callback_data="noop"),
            types.InlineKeyboardButton(text="‚ûï", callback_data=f"increase_{item}"),
            types.InlineKeyboardButton(text="‚ùå", callback_data=f"remove_{item}")
        )
    
    text += f"\n<b>–ò—Ç–æ–≥–æ: {total} —Å–æ–º</b>"
    
    kb.row(
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back"),
        types.InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data="checkout")
    )

    await message.answer(text, reply_markup=kb.as_markup()) 

@dp.message(Command("orders"))
async def cmd_orders(message: Message):
    user_id = message.from_user.id
    args = message.text.split()
    status_filter = args[1].lower() if len(args) > 1 else None
    if user_id in user_orders and user_orders[user_id]:
        response = "<b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
        for order in user_orders[user_id]:
            response += (
                f"üì¶ <b>–ó–∞–∫–∞–∑ #{order['order_number']}</b>\n"
                f"{order['text']}\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> {order['status'].value}\n\n"
                f"---\n\n"
    )
        await message.answer(response)
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        
async def cmd_contacts(message: Message):
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞: @DilovarAhi", reply_markup=main_menu)

@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = """
<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏
/search - –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /search —è–±–ª–æ–∫–æ)
/cart - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É
/orders - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã
"""
    await message.answer(help_text, reply_markup=main_menu)

@dp.message(Command("search"))
async def search_products(message: Message):
    search_query = message.text.replace("/search", "").strip().lower()
    if not search_query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: /search —è–±–ª–æ–∫–æ")
        return
        
    results = []
    for category, items in products.items():
        for item, price in items.items():
            if search_query in item.lower():
                results.append(f"‚ñ™Ô∏è {item} ‚Äî {price} —Å–æ–º ({category.replace('category_', '').capitalize()})")
    
    if results:
        await message.answer("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n" + "\n".join(results))
    else:
        await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî")

@dp.message(F.text == "üìÇ –ö–∞—Ç–∞–ª–æ–≥")
async def menu_catalog(message: Message):
    await message.delete()
    kb = InlineKeyboardBuilder()
    kb.button(text="–§—Ä—É–∫—Ç—ã", callback_data="category_fruits")
    kb.button(text="–û–≤–æ—â–∏", callback_data="category_vegetables")
    kb.button(text="–ù–∞–ø–∏—Ç–∫–∏", callback_data="category_drinks")
    kb.button(text="–°–Ω–µ–∫–∏", callback_data="category_snacks")
    kb.button(text="–ú–æ–ª–æ—á–∫–∞", callback_data="category_milks")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup())

@dp.message(F.text == "üõç –ö–æ—Ä–∑–∏–Ω–∞")
async def menu_cart(message: Message):
    await message.delete()
    await cmd_cart(message)

@dp.message(F.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def menu_orders(message: Message):
    await message.delete()
    await cmd_orders(message)

@dp.message(F.text == "üì¢ –ù–æ–≤–æ—Å—Ç–∏")
async def menu_news(message: Message):
    await message.delete()
    await message.answer("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞.")

class ReviewState(StatesGroup):
    waiting_for_rating = State()
    waiting_for_text = State()

@dp.message(F.text == "‚≠êÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def menu_reviews(message: Message, state: FSMContext):
    await message.delete()
    kb = InlineKeyboardBuilder()
    # –°–Ω–∞—á–∞–ª–∞ 1-3 –∑–≤–µ–∑–¥—ã
    for i in range(1, 4):
        kb.button(text="‚≠ê" * i, callback_data=f"rate_{i}")
    # –ó–∞—Ç–µ–º 4-5 –∑–≤–µ–∑–¥
    for i in range(4, 6):
        kb.button(text="‚≠ê" * i, callback_data=f"rate_{i}")
    kb.adjust(3, 2)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å:", reply_markup=kb.as_markup())
    await state.set_state(ReviewState.waiting_for_rating)

@dp.callback_query(lambda c: c.data.startswith("rate_"))
async def handle_rating(callback: types.CallbackQuery, state: FSMContext):
    rating = int(callback.data.split("_")[1])
    await state.update_data(rating=rating)
    await callback.message.edit_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! ({rating}‚≠ê)\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    await state.set_state(ReviewState.waiting_for_text)
    await callback.answer()

@dp.message(ReviewState.waiting_for_text)
async def handle_review_text(message: Message, state: FSMContext):
    data = await state.get_data()
    rating = data.get("rating")
    review_text = message.text
    user_name = f"@{message.from_user.username}" if message.from_user.username else f"ID {message.from_user.id}"
    
    review_message = (
        f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {user_name}:\n"
        f"–û—Ü–µ–Ω–∫–∞: {'‚≠ê' * rating}\n"
        f"–û—Ç–∑—ã–≤: {review_text}"
    )
    
    await bot.send_message(ADMIN_ID, review_message)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üíú", reply_markup=main_menu)
    await state.clear()

@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def menu_help(message: Message):
    await message.delete ()
    kb = InlineKeyboardBuilder()
    kb.button(
        text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", 
        url="https://t.me/DilovarAhi"
    )
    
    await message.answer(
        "<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
        "–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –î–£–ß–ê–†–•–ê üíú:\n"
        "‚Ä¢ –¢–µ–ª–µ–≥—Ä–∞–º: @DilovarAhi\n"
        "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +992 98 765 43 21\n\n"
        "–ë—ã—Å—Ç—Ä–∞—è –ø–æ–º–æ—â—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏üëá",
        reply_markup=kb.as_markup(),
        parse_mode=ParseMode.HTML
    )
    
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å –±–æ—Ç–æ–º
active_users = set()

@dp.message()
async def track_users(message: Message):
    """Track all users who interact with the bot"""
    if message.from_user and message.from_user.id:
        active_users.add(message.from_user.id)
        print(f"Added user {message.from_user.id} to active users")

@dp.message(Command("promote"))
async def send_promotion(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
        
    promo_text = message.text.replace("/promote", "").strip()
    if not promo_text:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promote <—Ç–µ–∫—Å—Ç –∞–∫—Ü–∏–∏>")
        return
        
    success_count = 0
    for user_id in active_users:
        try:
            await bot.send_message(
                user_id,
                f"üéâ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!</b>\n\n{promo_text}",
                reply_markup=main_menu
            )
            success_count += 1
        except Exception:
            continue
            
    await message.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
