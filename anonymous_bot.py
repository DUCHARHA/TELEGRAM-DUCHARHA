
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.filters import Command, CommandStart
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
import logging

# –¢–æ–∫–µ–Ω –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –±–æ—Ç–∞ (–Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather)
ANONYMOUS_BOT_TOKEN = "YOUR_ANONYMOUS_BOT_TOKEN"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –±–æ—Ç–∞
ADMIN_ID = 1648127193  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –±–æ—Ç–∞
anonymous_bot = Bot(token=ANONYMOUS_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
anonymous_dp = Dispatcher(storage=MemoryStorage())

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {chat_id: {"order_number": "order_id", "customer_id": user_id, "courier_id": user_id}}
active_chats = {}
# –°–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —á–∞—Ç–∞–º–∏: {user_id: chat_id}
user_to_chat = {}

@anonymous_dp.message(CommandStart())
async def anonymous_start(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_to_chat:
        chat_id = user_to_chat[user_id]
        chat_info = active_chats.get(chat_id, {})
        order_number = chat_info.get("order_number", "N/A")
        
        kb = InlineKeyboardBuilder()
        kb.button(text="üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="write_message")
        kb.button(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="end_chat")
        
        await message.answer(
            f"üîí <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç</b>\n"
            f"üì¶ –ó–∞–∫–∞–∑: #{order_number}\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ. –í–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.",
            reply_markup=kb.as_markup()
        )
    else:
        await message.answer(
            "üîí <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –∫—É—Ä—å–µ—Ä–∞–º–∏ –∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏.\n"
            "–î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –∑–∞–∫–∞–∑–µ."
        )

@anonymous_dp.callback_query(F.data == "write_message")
async def prompt_write_message(callback: types.CallbackQuery):
    await callback.message.answer(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=InlineKeyboardBuilder().button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_message").as_markup()
    )
    await callback.answer()

@anonymous_dp.callback_query(F.data == "cancel_message")
async def cancel_message(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

@anonymous_dp.callback_query(F.data == "end_chat")
async def end_chat(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    if user_id in user_to_chat:
        chat_id = user_to_chat[user_id]
        chat_info = active_chats.get(chat_id, {})
        
        customer_id = chat_info.get("customer_id")
        courier_id = chat_info.get("courier_id")
        order_number = chat_info.get("order_number", "N/A")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–∞—Ç–∞
        end_message = f"üí¨ <b>–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω</b>\nüì¶ –ó–∞–∫–∞–∑: #{order_number}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞!"
        
        try:
            if customer_id and customer_id != user_id:
                await anonymous_bot.send_message(customer_id, end_message)
            if courier_id and courier_id != user_id:
                await anonymous_bot.send_message(courier_id, end_message)
        except Exception as e:
            logging.error(f"Error notifying about chat end: {e}")
        
        # –£–¥–∞–ª—è–µ–º —á–∞—Ç –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        if customer_id in user_to_chat:
            del user_to_chat[customer_id]
        if courier_id in user_to_chat:
            del user_to_chat[courier_id]
        if chat_id in active_chats:
            del active_chats[chat_id]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            await anonymous_bot.send_message(
                ADMIN_ID,
                f"üí¨ <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n"
                f"üì¶ –ó–∞–∫–∞–∑: #{order_number}\n"
                f"–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {'–ö–ª–∏–µ–Ω—Ç' if user_id == customer_id else '–ö—É—Ä—å–µ—Ä'}"
            )
        except Exception as e:
            logging.error(f"Error notifying admin: {e}")
    
    await callback.message.edit_text("‚úÖ –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞!")
    await callback.answer()

@anonymous_dp.message(F.text)
async def handle_anonymous_message(message: Message):
    user_id = message.from_user.id
    
    if user_id not in user_to_chat:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start")
        return
    
    chat_id = user_to_chat[user_id]
    chat_info = active_chats.get(chat_id, {})
    
    customer_id = chat_info.get("customer_id")
    courier_id = chat_info.get("courier_id")
    order_number = chat_info.get("order_number", "N/A")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    if user_id == customer_id:
        recipient_id = courier_id
        sender_role = "üë§ –ö–ª–∏–µ–Ω—Ç"
    elif user_id == courier_id:
        recipient_id = customer_id
        sender_role = "üöó –ö—É—Ä—å–µ—Ä"
    else:
        await message.answer("–û—à–∏–±–∫–∞: –≤—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ —á–∞—Ç–∞")
        return
    
    if not recipient_id:
        await message.answer("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    try:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚Ü©Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data="write_message")
        kb.button(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="end_chat")
        
        await anonymous_bot.send_message(
            recipient_id,
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_role}</b>\n"
            f"üì¶ –ó–∞–∫–∞–∑: #{order_number}\n\n"
            f"{message.text}",
            reply_markup=kb.as_markup()
        )
        
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        await anonymous_bot.send_message(
            ADMIN_ID,
            f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º —á–∞—Ç–µ</b>\n"
            f"üì¶ –ó–∞–∫–∞–∑: #{order_number}\n"
            f"–û—Ç: {sender_role}\n"
            f"–¢–µ–∫—Å—Ç: {message.text}"
        )
        
    except Exception as e:
        logging.error(f"Error sending anonymous message: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞
async def create_anonymous_chat(order_number: str, customer_id: int, courier_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –∫—É—Ä—å–µ—Ä–æ–º"""
    chat_id = f"{order_number}_{customer_id}_{courier_id}"
    
    active_chats[chat_id] = {
        "order_number": order_number,
        "customer_id": customer_id,
        "courier_id": courier_id
    }
    
    user_to_chat[customer_id] = chat_id
    user_to_chat[courier_id] = chat_id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç
    chat_invitation = (
        f"üí¨ <b>–°–æ–∑–¥–∞–Ω –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç</b>\n"
        f"üì¶ –ó–∞–∫–∞–∑: #{order_number}\n\n"
        f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –±–æ—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è:\n"
        f"@YOUR_ANONYMOUS_BOT_USERNAME"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –±–æ—Ç–∞
    )
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç", url="https://t.me/YOUR_ANONYMOUS_BOT_USERNAME")
    
    try:
        await anonymous_bot.send_message(customer_id, chat_invitation, reply_markup=kb.as_markup())
        await anonymous_bot.send_message(courier_id, chat_invitation, reply_markup=kb.as_markup())
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await anonymous_bot.send_message(
            ADMIN_ID,
            f"üí¨ <b>–°–æ–∑–¥–∞–Ω –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç</b>\n"
            f"üì¶ –ó–∞–∫–∞–∑: #{order_number}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: ID {customer_id}\n"
            f"üöó –ö—É—Ä—å–µ—Ä: ID {courier_id}"
        )
        
        return True
    except Exception as e:
        logging.error(f"Error creating anonymous chat: {e}")
        return False

async def start_anonymous_bot():
    """–ó–∞–ø—É—Å–∫ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –±–æ—Ç–∞"""
    logging.info("Starting anonymous bot...")
    await anonymous_dp.start_polling(anonymous_bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(start_anonymous_bot())
