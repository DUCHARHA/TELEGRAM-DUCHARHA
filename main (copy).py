await state.clear()

@dp.message(Command("status"))
async def change_order_status(message: Message):
if message.from_user.id != ADMIN_ID:
return
try:
parts = message.text.split()
if len(parts) != 3:
raise ValueError("–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /status <user_id> <status>")
_, user_id_str, status_str = parts
user_id = int(user_id_str)
status = OrderStatus[status_str.upper()]
if user_id in user_orders:
user_orders[user_id]["status"] = status
await bot.send_message(user_id, f"<b>{status.value}</b>")
await message.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª—ë–Ω: {status.value}")
else:
await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
except Exception as e:
await message.answer("–û—à–∏–±–∫–∞. –ü—Ä–∏–º–µ—Ä: /status 123456789 preparing\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: accepted, preparing, on_the_way, delivered")

@dp.callback_query(lambda c: c.data == "back")
async def go_back(callback: types.CallbackQuery):
await send_welcome(callback.message)
await callback.answer()

@dp.message(Command("cart"))
async def cmd_cart(message: Message):
user_id = message.from_user.id
cart = user_carts.get(user_id, [])
if cart:
total = sum(price for _, price in cart)
text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n" + "\n".join(f"- {item} ‚Äî {price} —Å–æ–º" for item, price in cart)
text += f"\n\n<b>–ò—Ç–æ–≥–æ: {total} —Å–æ–º</b>"
else:
text = "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
kb = InlineKeyboardBuilder()
if cart:
kb.button(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
kb.button(text="–ù–∞–∑–∞–¥", callback_data="back")
await message.answer(text, reply_markup=kb.as_markup())

@dp.message(Command("orders"))
async def cmd_orders(message: Message):
user_id = message.from_user.id
args = message.text.split()
status_filter = args[1].lower() if len(args) > 1 else None
if user_id in user_orders:
order = user_orders[user_id]
if status_filter and order["status"].name.lower() != status_filter:
await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å —Ç–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º.")
else:
await message.answer(f"{order['text']}\n\n<b>–°—Ç–∞—Ç—É—Å:</b> {order['status'].value}")
else:
await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")

@dp.message(Command("contacts"))
async def cmd_contacts(message: Message):
await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞: @DilovarAhi")

@dp.message(Command("help"))
async def cmd_help(message: Message):
await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑.")

@dp.message(F.text == "üìÇ –ö–∞—Ç–∞–ª–æ–≥")
async def menu_catalog(message: Message):
await send_welcome(message)

@dp.message(F.text == "üõç –ö–æ—Ä–∑–∏–Ω–∞")
async def menu_cart(message: Message):
await cmd_cart(message)

@dp.message(F.text == "üì¶ –ó–∞–∫–∞–∑—ã")
async def menu_orders(message: Message):
await cmd_orders(message)

@dp.message(F.text == "üì¢ –ù–æ–≤–æ—Å—Ç–∏")
async def menu_news(message: Message):
await message.answer("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞.")

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def menu_settings(message: Message):
await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def menu_help(message: Message):
await cmd_help(message)

async def main():
await dp.start_polling(bot)

if name == "main":
keep_alive()
asyncio.run(main()